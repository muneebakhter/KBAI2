{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "projectName": {
            "type": "string",
            "defaultValue": "[concat('kbai-', uniqueString(resourceGroup().id))]",
            "maxLength": 10,
            "minLength": 3,
            "metadata": {
                "description": "Project name prefix for all resources"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources"
            }
        },
        "storageBackend": {
            "type": "string",
            "defaultValue": "azure_fileshare",
            "allowedValues": [
                "azure_fileshare",
                "azure_blob",
                "cosmosdb",
                "hybrid"
            ],
            "metadata": {
                "description": "Storage backend configuration"
            }
        },
        "deployAppService": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Whether to deploy the App Service for hosting KBAI"
            }
        },
        "openaiApiKey": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "OpenAI API key for AI features"
            }
        },
        "enableFreeTier": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Enable free tier for Cosmos DB (one per subscription)"
            }
        }
    },
    "variables": {
        "projectName": "[toLower(parameters('projectName'))]",
        "storageAccountName": "[concat(variables('projectName'), 'storage')]",
        "cosmosAccountName": "[concat(variables('projectName'), '-cosmos')]",
        "appServicePlanName": "[concat(variables('projectName'), '-plan')]",
        "webAppName": "[concat(variables('projectName'), '-app')]",
        "fileShareName": "kbai-data",
        "blobContainerName": "kbai-data",
        "databaseName": "kbai-db",
        "authSigningKey": "[concat('prod-signing-key-', uniqueString(resourceGroup().id))]",
        "deployStorage": "[or(equals(parameters('storageBackend'), 'azure_fileshare'), equals(parameters('storageBackend'), 'azure_blob'), equals(parameters('storageBackend'), 'hybrid'))]",
        "deployCosmos": "[or(equals(parameters('storageBackend'), 'cosmosdb'), equals(parameters('storageBackend'), 'hybrid'))]"
    },
    "resources": [
        {
            "condition": "[variables('deployStorage')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "name": "storageDeployment",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(deployment().properties.templateLink.uri, 'storage-account.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "storageAccountName": {
                        "value": "[variables('storageAccountName')]"
                    },
                    "fileShareName": {
                        "value": "[variables('fileShareName')]"
                    },
                    "blobContainerName": {
                        "value": "[variables('blobContainerName')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            "condition": "[variables('deployCosmos')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "name": "cosmosDeployment",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(deployment().properties.templateLink.uri, 'cosmosdb.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "cosmosAccountName": {
                        "value": "[variables('cosmosAccountName')]"
                    },
                    "databaseName": {
                        "value": "[variables('databaseName')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "enableFreeTier": {
                        "value": "[parameters('enableFreeTier')]"
                    }
                }
            }
        },
        {
            "condition": "[parameters('deployAppService')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "name": "appServiceDeployment",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'storageDeployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'cosmosDeployment')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(deployment().properties.templateLink.uri, 'app-service.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "appServicePlanName": {
                        "value": "[variables('appServicePlanName')]"
                    },
                    "webAppName": {
                        "value": "[variables('webAppName')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "storageType": {
                        "value": "[parameters('storageBackend')]"
                    },
                    "azureStorageConnectionString": {
                        "value": "[if(variables('deployStorage'), reference('storageDeployment').outputs.connectionString.value, '')]"
                    },
                    "cosmosEndpoint": {
                        "value": "[if(variables('deployCosmos'), reference('cosmosDeployment').outputs.cosmosEndpoint.value, '')]"
                    },
                    "cosmosKey": {
                        "value": "[if(variables('deployCosmos'), reference('cosmosDeployment').outputs.cosmosPrimaryKey.value, '')]"
                    },
                    "openaiApiKey": {
                        "value": "[parameters('openaiApiKey')]"
                    },
                    "authSigningKey": {
                        "value": "[variables('authSigningKey')]"
                    }
                }
            }
        }
    ],
    "outputs": {
        "resourceGroupName": {
            "type": "string",
            "value": "[resourceGroup().name]"
        },
        "storageAccountName": {
            "condition": "[variables('deployStorage')]",
            "type": "string",
            "value": "[if(variables('deployStorage'), reference('storageDeployment').outputs.storageAccountName.value, '')]"
        },
        "storageConnectionString": {
            "condition": "[variables('deployStorage')]",
            "type": "string",
            "value": "[if(variables('deployStorage'), reference('storageDeployment').outputs.connectionString.value, '')]"
        },
        "cosmosAccountName": {
            "condition": "[variables('deployCosmos')]",
            "type": "string",
            "value": "[if(variables('deployCosmos'), reference('cosmosDeployment').outputs.cosmosAccountName.value, '')]"
        },
        "cosmosEndpoint": {
            "condition": "[variables('deployCosmos')]",
            "type": "string",
            "value": "[if(variables('deployCosmos'), reference('cosmosDeployment').outputs.cosmosEndpoint.value, '')]"
        },
        "webAppUrl": {
            "condition": "[parameters('deployAppService')]",
            "type": "string",
            "value": "[if(parameters('deployAppService'), reference('appServiceDeployment').outputs.webAppUrl.value, '')]"
        },
        "deploymentInstructions": {
            "type": "object",
            "value": {
                "description": "KBAI Azure deployment completed successfully",
                "storageBackend": "[parameters('storageBackend')]",
                "nextSteps": [
                    "1. Set the OPENAI_API_KEY in the App Service application settings if not provided during deployment",
                    "2. Access your KBAI application at the provided webAppUrl",
                    "3. Use the admin interface at {webAppUrl}/admin to manage the system",
                    "4. API documentation is available at {webAppUrl}/docs"
                ],
                "configuration": {
                    "storageType": "[parameters('storageBackend')]",
                    "azureStorageConnectionString": "[if(variables('deployStorage'), '[Retrieved from storage deployment]', 'Not deployed')]",
                    "cosmosEndpoint": "[if(variables('deployCosmos'), '[Retrieved from Cosmos deployment]', 'Not deployed')]"
                }
            }
        }
    }
}